import sys
Import('append_includes')

Import('plugin_env')
Import('static_env')
Import('append_lib')

cameras_env = plugin_env.Clone();

#perspectiveCamera=cameras_env.SharedLibrary (target='perspectiveCamera', source=['perspectiveCamera.cc'])
#cameras_env.Install('${YF_PLUGINPATH}',perspectiveCamera)
perspectiveCameras=cameras_env.SharedLibrary (target='perspectiveCameras', source=['perspectiveCamera.cc','architectCamera.cc'])
cameras_env.Install('${YF_PLUGINPATH}',perspectiveCameras)

orthographicCamera=cameras_env.SharedLibrary (target='orthographicCamera', source=['orthographicCamera.cc'])
cameras_env.Install('${YF_PLUGINPATH}',orthographicCamera)

angularCamera=cameras_env.SharedLibrary (target='angularCamera', source=['angularCamera.cc'])
cameras_env.Install('${YF_PLUGINPATH}',angularCamera)

#architectCamera_env = cameras_env.Clone();
#architectCamera_env.Append(LIBS = ['perspectiveCamera'])
#architectCamera_env.Append(LIBPATH = ['../cameras'])
#architectCamera=architectCamera_env.SharedLibrary (target='architectCamera', source=['architectCamera.cc'])
#cameras_env.Install('${YF_PLUGINPATH}',architectCamera)

#cameras_env.Install('${YF_PACKPATH}${YF_PLUGINPATH}',[perspectiveCamera,architectCamera,orthographicCamera,angularCamera])
cameras_env.Install('${YF_PACKPATH}${YF_PLUGINPATH}',[perspectiveCameras,orthographicCamera,angularCamera])

cameras_env.Alias('install_cameras','${YF_PLUGINPATH}')
